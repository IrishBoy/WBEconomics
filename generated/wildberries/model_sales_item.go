/*
 * API продавца
 *
 * # Общее описание <style> .langChange {   text-align: left;   padding: 2px 222px 2px 18px; } </style> <style> .new {   display: inline-block;   padding: 2px 8px;   margin: 0;   background-color: #ffa500;   color: #ffffff;   font-size: 13px;   vertical-align: middle;   line-height: 1.6;   border-radius: 4px;   font-weight: 600;   font-size: 12px; } </style> <style> .newM {   padding: 5px 10px;   display: inline-block;   background-color: #ffa500;   color: #ffffff;   cursor: pointer;   text-align: center;   outline: none;   margin: 0 5px 5px 5px;   #border: 1px solid #07090b;   border-radius: 5px;   min-width: 60px;   font-size: 0.9em;   font-weight: bold; } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной проверки API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul> <br>  ## Поддержка Техническая поддержка осуществляется через диалоги в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> <br> <br>  ## Авторизация Авторизация осуществляется по токенам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api).   <br>  <br>  Существует три типа токенов:   <ol>     <li>Стандартный. Используется для работы с методами из разделов: Цены, Промокоды и скидки, Контент, Marketplace, Рекомендации, Отзывы, Вопросы.</li>     <li>Статистика. Используется для работы с методами из раздела Статистика.</li>     <li>Реклама. Используется для работы с методами из раздела Реклама.</li>   </ol>    Обратите внимание, что токен отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный токен следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br> <br> ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> <br> ## Release Notes <p>Для просмотра обновлений перейдите по <span><a href=\"./releasenotes/index.html\" target=\"_blank\">ссылке</a></span>.</p> 
 *
 * API version: 2.4
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package wildberries
import (
	"time"
)

type SalesItem struct {
	// Номер заказа. Объединяет все позиции одного заказа.
	GNumber string `json:"gNumber,omitempty"`
	// Дата и время продажи. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag=1`. Если часовой пояс не указан, то берется Московское время UTC+3.
	Date time.Time `json:"date,omitempty"`
	// Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag=0` или не указан. Если часовой пояс не указан, то берется Московское время UTC+3.
	LastChangeDate time.Time `json:"lastChangeDate,omitempty"`
	// Артикул продавца
	SupplierArticle string `json:"supplierArticle,omitempty"`
	// Размер товара (пример S, M, L, XL, 42, 42-43)
	TechSize string `json:"techSize,omitempty"`
	// Бар-код
	Barcode string `json:"barcode,omitempty"`
	// Цена до согласованной скидки/промо/спп. Для получения цены со скидкой можно воспользоваться формулой `priceWithDiscount = totalPrice * (1 - discountPercent/100)`
	TotalPrice float64 `json:"totalPrice,omitempty"`
	// Согласованный итоговый дисконт
	DiscountPercent int32 `json:"discountPercent,omitempty"`
	// Договор поставки
	IsSupply bool `json:"isSupply,omitempty"`
	// Договор реализации
	IsRealization bool `json:"isRealization,omitempty"`
	// Скидка по промокоду
	PromoCodeDiscount float64 `json:"promoCodeDiscount,omitempty"`
	// Название склада отгрузки
	WarehouseName string `json:"warehouseName,omitempty"`
	// Страна
	CountryName string `json:"countryName,omitempty"`
	// Округ
	OblastOkrugName string `json:"oblastOkrugName,omitempty"`
	// Регион
	RegionName string `json:"regionName,omitempty"`
	// Номер поставки (от продавца на склад)
	IncomeID int32 `json:"incomeID,omitempty"`
	// Уникальный идентификатор продажи/возврата. <ul>  <li> `SXXXXXXXXXX` — продажа  <li> `RXXXXXXXXXX` — возврат  <li> `DXXXXXXXXXXX` — доплата <li> `AXXXXXXXXX` – сторно продаж (все значения полей как у продажи, но поля с суммами и кол-вом с минусом как в возврате) <li> `BXXXXXXXXX` - сторно возврата (все значения полей как у возврата, но поля с суммами и кол-вом с плюсом, в противоположность возврату) </ul> 
	SaleID string `json:"saleID,omitempty"`
	// Уникальный идентификатор позиции заказа. Может использоваться для поиска соответствия между заказами и продажами.
	Odid int32 `json:"odid,omitempty"`
	// Согласованная скидка постоянного покупателя
	Spp float64 `json:"spp,omitempty"`
	// К перечислению продавцку
	ForPay float64 `json:"forPay,omitempty"`
	// Фактическая цена заказа с учетом всех скидок
	FinishedPrice float64 `json:"finishedPrice,omitempty"`
	// Цена, от которой считается вознаграждение продавца `forpay` (с учетом всех согласованных скидок)
	PriceWithDisc float64 `json:"priceWithDisc,omitempty"`
	// Артикул WB
	NmId int32 `json:"nmId,omitempty"`
	// Предмет
	Subject string `json:"subject,omitempty"`
	// Категория
	Category string `json:"category,omitempty"`
	// Бренд
	Brand string `json:"brand,omitempty"`
	// Для сторно-операций `1`, для остальных `0`
	IsStorno int32 `json:"isStorno,omitempty"`
	// Цифровое значение стикера, который клеится на товар в процессе сборки заказа по системе Маркетплейс.
	Sticker string `json:"sticker,omitempty"`
	// Уникальный идентификатор заказа, функционально аналогичный `odid`/`rid`.  Данный параметр введен в июле'22 и в течение переходного периода может быть заполнен не во всех ответах. Примечание для работающих по системе Маркетплейс: `srid` равен `rid` в ответе на метод `GET /api/v2/orders`. 
	Srid string `json:"srid,omitempty"`
}
