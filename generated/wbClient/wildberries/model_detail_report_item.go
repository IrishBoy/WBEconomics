/*
 * API продавца
 *
 * # Общее описание <style> .langChange {   text-align: left;   padding: 2px 222px 2px 18px; } </style> <style> .new {   display: inline-block;   padding: 2px 8px;   margin: 0;   background-color: #ffa500;   color: #ffffff;   font-size: 13px;   vertical-align: middle;   line-height: 1.6;   border-radius: 4px;   font-weight: 600;   font-size: 12px; } </style> <style> .newM {   padding: 5px 10px;   display: inline-block;   background-color: #ffa500;   color: #ffffff;   cursor: pointer;   text-align: center;   outline: none;   margin: 0 5px 5px 5px;   #border: 1px solid #07090b;   border-radius: 5px;   min-width: 60px;   font-size: 0.9em;   font-weight: bold; } </style>  Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной проверки API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul> <br>  ## Поддержка Техническая поддержка осуществляется через диалоги в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> <br> <br>  ## Авторизация Авторизация осуществляется по токенам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api).   <br>  <br>  Существует три типа токенов:   <ol>     <li>Стандартный. Используется для работы с методами из разделов: Цены, Промокоды и скидки, Контент, Marketplace, Рекомендации, Отзывы, Вопросы.</li>     <li>Статистика. Используется для работы с методами из раздела Статистика.</li>     <li>Реклама. Используется для работы с методами из раздела Реклама.</li>   </ol>    Обратите внимание, что токен отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный токен следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: .........`. <br> <br> <br> ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul> <br> ## Release Notes <p>Для просмотра обновлений перейдите по <span><a href=\"./releasenotes/index.html\" target=\"_blank\">ссылке</a></span>.</p> 
 *
 * API version: 2.4
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package wildberries
import (
	"time"
)

type DetailReportItem struct {
	// Номер отчёта
	RealizationreportId int32 `json:"realizationreport_id,omitempty"`
	// Дата начала отчётного периода
	DateFrom time.Time `json:"date_from,omitempty"`
	// Дата конца отчётного периода
	DateTo time.Time `json:"date_to,omitempty"`
	// Дата формирования отчёта
	CreateDt time.Time `json:"create_dt,omitempty"`
	// Договор
	SuppliercontractCode *interface{} `json:"suppliercontract_code,omitempty"`
	// Номер строки
	RrdId int32 `json:"rrd_id,omitempty"`
	// Номер поставки
	GiId int32 `json:"gi_id,omitempty"`
	// Предмет
	SubjectName string `json:"subject_name,omitempty"`
	// Артикул WB
	NmId int32 `json:"nm_id,omitempty"`
	// Бренд
	BrandName string `json:"brand_name,omitempty"`
	// Артикул продавца
	SaName string `json:"sa_name,omitempty"`
	// Размер
	TsName string `json:"ts_name,omitempty"`
	// Баркод
	Barcode string `json:"barcode,omitempty"`
	// Тип документа
	DocTypeName string `json:"doc_type_name,omitempty"`
	// Количество
	Quantity int32 `json:"quantity,omitempty"`
	// Цена розничная
	RetailPrice float64 `json:"retail_price,omitempty"`
	// Сумма продаж (возвратов)
	RetailAmount float64 `json:"retail_amount,omitempty"`
	// Согласованная скидка
	SalePercent int32 `json:"sale_percent,omitempty"`
	// Процент комиссии
	CommissionPercent float64 `json:"commission_percent,omitempty"`
	// Склад
	OfficeName string `json:"office_name,omitempty"`
	// Обоснование для оплаты
	SupplierOperName string `json:"supplier_oper_name,omitempty"`
	// Дата заказа. <br> Присылается с явным указанием часового пояса
	OrderDt time.Time `json:"order_dt,omitempty"`
	// Дата продажи. <br> Присылается с явным указанием часового пояса
	SaleDt time.Time `json:"sale_dt,omitempty"`
	// Дата операции. <br> Присылается с явным указанием часового пояса
	RrDt time.Time `json:"rr_dt,omitempty"`
	// Штрих-код
	ShkId int32 `json:"shk_id,omitempty"`
	// Цена розничная с учетом согласованной скидки
	RetailPriceWithdiscRub float64 `json:"retail_price_withdisc_rub,omitempty"`
	// Количество доставок
	DeliveryAmount int32 `json:"delivery_amount,omitempty"`
	// Количество возвратов
	ReturnAmount int32 `json:"return_amount,omitempty"`
	// Стоимость логистики
	DeliveryRub float64 `json:"delivery_rub,omitempty"`
	// Тип коробов
	GiBoxTypeName string `json:"gi_box_type_name,omitempty"`
	// Согласованный продуктовый дисконт
	ProductDiscountForReport float64 `json:"product_discount_for_report,omitempty"`
	// Промокод
	SupplierPromo float64 `json:"supplier_promo,omitempty"`
	// Уникальный идентификатор заказа
	Rid int32 `json:"rid,omitempty"`
	// Скидка постоянного покупателя
	PpvzSppPrc float64 `json:"ppvz_spp_prc,omitempty"`
	// Размер кВВ без НДС, % базовый
	PpvzKvwPrcBase float64 `json:"ppvz_kvw_prc_base,omitempty"`
	// Итоговый кВВ без НДС, %
	PpvzKvwPrc float64 `json:"ppvz_kvw_prc,omitempty"`
	// Вознаграждение с продаж до вычета услуг поверенного, без НДС
	PpvzSalesCommission float64 `json:"ppvz_sales_commission,omitempty"`
	// К перечислению продавцу за реализованный товар
	PpvzForPay float64 `json:"ppvz_for_pay,omitempty"`
	// Возмещение за выдачу и возврат товаров на ПВЗ
	PpvzReward float64 `json:"ppvz_reward,omitempty"`
	// Возмещение расходов по эквайрингу. <br>Расходы WB на услуги эквайринга: вычитаются из вознаграждения WB и не влияют на доход продавца 
	AcquiringFee float64 `json:"acquiring_fee,omitempty"`
	// Наименование банка, предоставляющего услуги эквайринга
	AcquiringBank string `json:"acquiring_bank,omitempty"`
	// Вознаграждение WB без НДС
	PpvzVw float64 `json:"ppvz_vw,omitempty"`
	// НДС с вознаграждения WB
	PpvzVwNds float64 `json:"ppvz_vw_nds,omitempty"`
	// Номер офиса
	PpvzOfficeId int32 `json:"ppvz_office_id,omitempty"`
	// Наименование офиса доставки
	PpvzOfficeName string `json:"ppvz_office_name,omitempty"`
	// Номер партнера
	PpvzSupplierId int32 `json:"ppvz_supplier_id,omitempty"`
	// Партнер
	PpvzSupplierName string `json:"ppvz_supplier_name,omitempty"`
	// ИНН партнера
	PpvzInn string `json:"ppvz_inn,omitempty"`
	// Номер таможенной декларации
	DeclarationNumber string `json:"declaration_number,omitempty"`
	// Обоснование штрафов и доплат. <br> Поле будет в ответе при наличии значения 
	BonusTypeName string `json:"bonus_type_name,omitempty"`
	// Цифровое значение стикера, который клеится на товар в процессе сборки заказа по схеме \"Маркетплейс\"
	StickerId string `json:"sticker_id,omitempty"`
	// Страна продажи
	SiteCountry string `json:"site_country,omitempty"`
	// Штрафы
	Penalty float64 `json:"penalty,omitempty"`
	// Доплаты
	AdditionalPayment float64 `json:"additional_payment,omitempty"`
	// Код маркировки. <br> Поле будет в ответе при наличии значения 
	Kiz string `json:"kiz,omitempty"`
	// Уникальный идентификатор заказа. Примечание для использующих API Marketplace: `srid` равен `rid` в ответах методов сборочных заданий. 
	Srid string `json:"srid,omitempty"`
}
